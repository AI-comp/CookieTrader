// Generated by CoffeeScript 1.6.3
(function() {
  var Player, Room, room, routes, websocket;

  Room = require('./model/room');

  Player = require('./public/js/player');

  room = new Room;

  routes = function(app) {
    return app.get('/', function(req, res) {
      return res.render('index.ejs', {
        locals: {
          message: "Hello, world!"
        }
      });
    });
  };

  websocket = function(io) {
    return io.sockets.on('connection', function(socket) {
      room.enterAudience();
      socket.on('message', function(message) {
        socket.send(message);
        return socket.broadcast.emit(message);
      });
      socket.on('participate', function(obj) {
        var player;
        player = room.participatePlayer(obj.name);
        socket.emit('participate', {
          player: player
        });
        if (room.isReady) {
          return socket.emit('start');
        }
      });
      socket.on('getInfo', function(obj) {
        var player;
        player = obj.player;
        room.updatePlayer(player);
        return socket.emit('getInfo', {
          allPlayers: room.allPlayers(),
          bakeries: room.globalBakeries()
        });
      });
      socket.on('buy', function(obj) {
        var bakery, player, price, res;
        player = obj.player;
        bakery = obj.bakery;
        price = room.buyBakery(player, bakery);
        res = price != null ? {
          status: 'ok',
          bakery: bakery,
          price: price
        } : {
          status: 'ng',
          message: 'cookie is not enough'
        };
        return socket.emit('buy', res);
      });
      return socket.on('sell', function(obj) {
        var bakery, player, price, res;
        player = obj.player;
        bakery = obj.bakery;
        price = room.sellBakery(player, bakery);
        res = price != null ? {
          status: 'ok',
          bakery: bakery,
          price: price
        } : {
          status: 'ng',
          message: 'bakery is not enough'
        };
        return socket.emit('sell', res);
      });
    });
  };

  exports.routes = routes;

  exports.websocket = websocket;

}).call(this);
